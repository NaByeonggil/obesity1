'use client'

import { useState, useRef } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { FileText, Upload, Video, Download, Eye, Trash2, Send, Calendar, User, Clock } from 'lucide-react'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Alert, AlertDescription } from '@/components/ui/alert'

interface Prescription {
  id: string
  patientName: string
  patientEmail: string
  date: string
  time: string
  type: 'telehealth'
  diagnosis: string
  medication: string
  instructions: string
  fileUrl?: string
  fileName?: string
  status: 'draft' | 'sent'
}

export default function DoctorPrescriptionsPage() {
  const [prescriptions, setPrescriptions] = useState<Prescription[]>([
    {
      id: '1',
      patientName: '김환자',
      patientEmail: 'kim@example.com',
      date: '2025-09-24',
      time: '10:30',
      type: 'telehealth',
      diagnosis: '감기',
      medication: '해열제, 기침감기약',
      instructions: '하루 3회 식후 복용',
      status: 'sent',
      fileName: 'prescription_20250924_kim.pdf'
    },
    {
      id: '2',
      patientName: '이환자',
      patientEmail: 'lee@example.com',
      date: '2025-09-25',
      time: '15:00',
      type: 'telehealth',
      diagnosis: '두통과 어지러움',
      medication: '진통소염제',
      instructions: '하루 1회 식후 복용',
      status: 'draft'
    }
  ])

  const [selectedTab, setSelectedTab] = useState('all')
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [selectedPrescription, setSelectedPrescription] = useState<Prescription | null>(null)
  const [uploadedFile, setUploadedFile] = useState<File | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // 새 처방전 상태
  const [newPrescription, setNewPrescription] = useState({
    patientName: '',
    diagnosis: '',
    medication: '',
    instructions: ''
  })

  // 파일 업로드 처리
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setUploadedFile(file)
      alert(`파일 "${file.name}"이 선택되었습니다.`)
    }
  }

  // 처방전 생성
  const handleCreatePrescription = () => {
    if (!newPrescription.patientName || !newPrescription.diagnosis) {
      alert('환자명과 진단명을 입력해주세요.')
      return
    }

    const newPrescriptionData: Prescription = {
      id: Date.now().toString(),
      patientName: newPrescription.patientName,
      patientEmail: `${newPrescription.patientName.toLowerCase()}@example.com`,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toTimeString().slice(0, 5),
      type: 'telehealth',
      diagnosis: newPrescription.diagnosis,
      medication: newPrescription.medication,
      instructions: newPrescription.instructions,
      fileName: uploadedFile?.name,
      status: 'draft'
    }

    setPrescriptions([...prescriptions, newPrescriptionData])
    setIsCreateModalOpen(false)
    setNewPrescription({ patientName: '', diagnosis: '', medication: '', instructions: '' })
    setUploadedFile(null)
    alert('처방전이 생성되었습니다.')
  }

  // 처방전 전송
  const handleSendPrescription = (id: string) => {
    setPrescriptions(prev =>
      prev.map(p =>
        p.id === id ? { ...p, status: 'sent' as const } : p
      )
    )
    alert('처방전이 환자에게 전송되었습니다.')
  }

  // 처방전 삭제
  const handleDeletePrescription = (id: string) => {
    if (confirm('정말 삭제하시겠습니까?')) {
      setPrescriptions(prev => prev.filter(p => p.id !== id))
    }
  }

  // 필터링된 처방전 목록
  const filteredPrescriptions = prescriptions.filter(p => {
    if (selectedTab === 'all') return true
    if (selectedTab === 'draft') return p.status === 'draft'
    if (selectedTab === 'sent') return p.status === 'sent'
    return true
  })

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">처방전 관리</h1>
          <p className="text-gray-600 mt-2">
            비대면 진료 처방전을 생성하고 관리하세요
          </p>
        </div>
        <Button onClick={() => setIsCreateModalOpen(true)}>
          <FileText className="h-4 w-4 mr-2" />
          새 처방전 생성
        </Button>
      </div>

      <Alert className="bg-blue-50 border-blue-200">
        <Video className="h-4 w-4 text-blue-600" />
        <AlertDescription>
          <strong>비대면 진료 전용:</strong> 처방전 전송 시 약국 접수용 파일을 첨부할 수 있습니다.
        </AlertDescription>
      </Alert>

      {/* 탭 필터링 */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="all">전체 ({prescriptions.length})</TabsTrigger>
          <TabsTrigger value="draft">
            임시저장 ({prescriptions.filter(p => p.status === 'draft').length})
          </TabsTrigger>
          <TabsTrigger value="sent">
            전송완료 ({prescriptions.filter(p => p.status === 'sent').length})
          </TabsTrigger>
        </TabsList>

        <TabsContent value={selectedTab} className="space-y-4 mt-6">
          {filteredPrescriptions.length === 0 ? (
            <Card>
              <CardContent className="text-center py-10">
                <FileText className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                <p className="text-gray-500">처방전이 없습니다.</p>
              </CardContent>
            </Card>
          ) : (
            filteredPrescriptions.map((prescription) => (
              <Card key={prescription.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <div className="space-y-2">
                      <div className="flex items-center gap-3">
                        <CardTitle className="text-xl">
                          {prescription.patientName}
                        </CardTitle>
                        <Badge variant={prescription.status === 'sent' ? 'success' : 'warning'}>
                          {prescription.status === 'sent' ? '전송완료' : '임시저장'}
                        </Badge>
                        <Badge variant="secondary">
                          <Video className="h-3 w-3 mr-1" />
                          비대면진료
                        </Badge>
                      </div>
                      <CardDescription>진단: {prescription.diagnosis}</CardDescription>
                    </div>
                    <div className="flex gap-2">
                      {prescription.status === 'draft' ? (
                        <Button
                          size="sm"
                          variant="default"
                          onClick={() => handleSendPrescription(prescription.id)}
                        >
                          <Send className="h-4 w-4 mr-1" />
                          전송
                        </Button>
                      ) : (
                        <Button size="sm" variant="outline">
                          <Eye className="h-4 w-4 mr-1" />
                          확인
                        </Button>
                      )}
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => handleDeletePrescription(prescription.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-semibold text-gray-600">처방 약물</p>
                      <p className="text-sm">{prescription.medication}</p>
                    </div>
                    <div>
                      <p className="text-sm font-semibold text-gray-600">복용 방법</p>
                      <p className="text-sm">{prescription.instructions}</p>
                    </div>
                  </div>
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <div className="flex items-center gap-4">
                      <span className="flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        {prescription.date}
                      </span>
                      <span className="flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {prescription.time}
                      </span>
                    </div>
                    {prescription.fileName && (
                      <div className="flex items-center gap-1 text-blue-600">
                        <FileText className="h-3 w-3" />
                        {prescription.fileName}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))
          )}
        </TabsContent>
      </Tabs>

      {/* 새 처방전 생성 모달 */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto mx-4">
            <div className="p-6 border-b">
              <h2 className="text-lg font-semibold">새 처방전 생성</h2>
              <p className="text-sm text-gray-600 mt-1">
                비대면 진료 처방전을 생성하고 파일을 첨부할 수 있습니다.
              </p>
            </div>

            <div className="p-6 space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="patientName">환자명 *</Label>
                <Input
                  id="patientName"
                  value={newPrescription.patientName}
                  onChange={(e) => setNewPrescription({
                    ...newPrescription,
                    patientName: e.target.value
                  })}
                  placeholder="환자 이름을 입력하세요"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="diagnosis">진단명 *</Label>
                <Input
                  id="diagnosis"
                  value={newPrescription.diagnosis}
                  onChange={(e) => setNewPrescription({
                    ...newPrescription,
                    diagnosis: e.target.value
                  })}
                  placeholder="진단명을 입력하세요"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="medication">처방 약물</Label>
              <Input
                id="medication"
                value={newPrescription.medication}
                onChange={(e) => setNewPrescription({
                  ...newPrescription,
                  medication: e.target.value
                })}
                placeholder="처방할 약물명을 입력하세요"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="instructions">복용 안내사항</Label>
              <Textarea
                id="instructions"
                value={newPrescription.instructions}
                onChange={(e) => setNewPrescription({
                  ...newPrescription,
                  instructions: e.target.value
                })}
                placeholder="복용 방법 및 주의사항을 입력하세요"
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label>처방전 파일 첨부</Label>
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".pdf,.jpg,.jpeg,.png"
                  onChange={handleFileUpload}
                  className="hidden"
                />
                <Upload className="h-10 w-10 mx-auto mb-3 text-gray-400" />
                {uploadedFile ? (
                  <div>
                    <p className="text-sm text-green-600 font-semibold">
                      {uploadedFile.name}
                    </p>
                    <Button
                      size="sm"
                      variant="outline"
                      className="mt-2"
                      onClick={() => fileInputRef.current?.click()}
                    >
                      다른 파일 선택
                    </Button>
                  </div>
                ) : (
                  <>
                    <p className="text-sm text-gray-600 mb-2">
                      약국 접수용 처방전 파일을 선택하세요
                    </p>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => fileInputRef.current?.click()}
                    >
                      파일 선택
                    </Button>
                  </>
                )}
              </div>
              <p className="text-xs text-gray-500">
                지원 형식: PDF, JPG, PNG (최대 10MB)
              </p>
            </div>

            <div className="flex justify-end gap-2 p-6 border-t">
              <Button variant="outline" onClick={() => setIsCreateModalOpen(false)}>
                취소
              </Button>
              <Button onClick={handleCreatePrescription}>
                처방전 생성
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}