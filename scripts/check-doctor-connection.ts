import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkDoctorConnection() {
  try {
    console.log('=== Ï†§ÎùºÏùòÏõêÍ≥º ÏÑúÏö∏ÎπÑÎßåÌÅ¥Î¶¨Îãâ Ïó∞Í¥ÄÏÑ± ÌôïÏù∏ ===\n')

    // 1. Î™®Îì† ÏùòÏÇ¨ Ï†ïÎ≥¥ Ï°∞Ìöå
    const doctors = await prisma.users.findMany({
      where: { role: 'DOCTOR' },
      select: {
        id: true,
        name: true,
        clinic: true,
        specialization: true,
        email: true,
        phone: true
      },
      orderBy: { name: 'asc' }
    })

    console.log('üìã Ï†ÑÏ≤¥ ÏùòÏÇ¨ Î™©Î°ù:')
    doctors.forEach((doctor, index) => {
      console.log(`${index + 1}. ID: ${doctor.id}`)
      console.log(`   Ïù¥Î¶Ñ: ${doctor.name}`)
      console.log(`   ÌÅ¥Î¶¨Îãâ: ${doctor.clinic}`)
      console.log(`   Ï†ÑÎ¨∏Î∂ÑÏïº: ${doctor.specialization}`)
      console.log(`   Ïù¥Î©îÏùº: ${doctor.email}`)
      console.log(`   Ï†ÑÌôî: ${doctor.phone}`)
      console.log('---')
    })

    // 2. Ï†§ÎùºÏùòÏõê Í¥ÄÎ†® ÏùòÏÇ¨ ÌôïÏù∏
    const jellaDoctor = doctors.find(d => d.clinic?.includes('Ï†§Îùº'))
    console.log('\nüè• Ï†§ÎùºÏùòÏõê ÏùòÏÇ¨:')
    if (jellaDoctor) {
      console.log(`ID: ${jellaDoctor.id}`)
      console.log(`Ïù¥Î¶Ñ: ${jellaDoctor.name}`)
      console.log(`ÌÅ¥Î¶¨Îãâ: ${jellaDoctor.clinic}`)
    } else {
      console.log('Ï†§ÎùºÏùòÏõê ÏùòÏÇ¨Í∞Ä ÏóÜÏäµÎãàÎã§.')
    }

    // 3. ÏÑúÏö∏ÎπÑÎßåÌÅ¥Î¶¨Îãâ Í¥ÄÎ†® ÏùòÏÇ¨ ÌôïÏù∏
    const seoulObesityDoctor = doctors.find(d => d.clinic?.includes('ÏÑúÏö∏ÎπÑÎßå'))
    console.log('\nüè• ÏÑúÏö∏ÎπÑÎßåÌÅ¥Î¶¨Îãâ ÏùòÏÇ¨:')
    if (seoulObesityDoctor) {
      console.log(`ID: ${seoulObesityDoctor.id}`)
      console.log(`Ïù¥Î¶Ñ: ${seoulObesityDoctor.name}`)
      console.log(`ÌÅ¥Î¶¨Îãâ: ${seoulObesityDoctor.clinic}`)
    } else {
      console.log('ÏÑúÏö∏ÎπÑÎßåÌÅ¥Î¶¨Îãâ ÏùòÏÇ¨Í∞Ä ÏóÜÏäµÎãàÎã§.')
    }

    // 4. ÏµúÍ∑º ÏòàÏïΩ ÌòÑÌô© ÌôïÏù∏
    console.log('\nüìÖ ÏµúÍ∑º ÏòàÏïΩ ÌòÑÌô© (ÏµúÍ∑º 5Í∞ú):')
    const recentAppointments = await prisma.appointments.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      include: {
        users_appointments_doctorIdTousers: {
          select: {
            id: true,
            name: true,
            clinic: true,
            specialization: true
          }
        },
        users_appointments_patientIdTousers: {
          select: {
            id: true,
            name: true
          }
        }
      }
    })

    recentAppointments.forEach((apt, index) => {
      console.log(`${index + 1}. ÏòàÏïΩ ID: ${apt.id}`)
      console.log(`   ÏùòÏÇ¨ ID: ${apt.doctorId}`)
      console.log(`   ÏùòÏÇ¨ Ïù¥Î¶Ñ: ${apt.users_appointments_doctorIdTousers?.name}`)
      console.log(`   ÌÅ¥Î¶¨Îãâ: ${apt.users_appointments_doctorIdTousers?.clinic}`)
      console.log(`   ÌôòÏûê ID: ${apt.patientId}`)
      console.log(`   ÌôòÏûê Ïù¥Î¶Ñ: ${apt.users_appointments_patientIdTousers?.name}`)
      console.log(`   ÏÉùÏÑ±Ïùº: ${apt.createdAt}`)
      console.log('---')
    })

    // 5. doc_001 ID ÌôïÏù∏
    console.log('\nüîç doc_001 ÏùòÏÇ¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:')
    const doc001 = await prisma.users.findUnique({
      where: { id: 'doc_001' },
      select: {
        id: true,
        name: true,
        clinic: true,
        specialization: true,
        email: true,
        phone: true,
        createdAt: true
      }
    })

    if (doc001) {
      console.log('Ï°¥Ïû¨Ìï®!')
      console.log(`Ïù¥Î¶Ñ: ${doc001.name}`)
      console.log(`ÌÅ¥Î¶¨Îãâ: ${doc001.clinic}`)
      console.log(`Ï†ÑÎ¨∏Î∂ÑÏïº: ${doc001.specialization}`)
      console.log(`Ïù¥Î©îÏùº: ${doc001.email}`)
      console.log(`ÏÉùÏÑ±Ïùº: ${doc001.createdAt}`)
    } else {
      console.log('doc_001 ÏùòÏÇ¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.')
    }

    // 6. Ï†§ÎùºÏùòÏõê ÏùòÏÇ¨ ID ÌôïÏù∏
    if (jellaDoctor) {
      console.log(`\nüîç Ï†§ÎùºÏùòÏõê ÏùòÏÇ¨(${jellaDoctor.name}) ÏÉÅÏÑ∏ Ï†ïÎ≥¥:`)
      console.log(`ID: ${jellaDoctor.id}`)
      console.log(`Ïù¥Î¶Ñ: ${jellaDoctor.name}`)
      console.log(`ÌÅ¥Î¶¨Îãâ: ${jellaDoctor.clinic}`)

      // Ïù¥ ÏùòÏÇ¨Î°ú ÎßåÎì§Ïñ¥ÏßÑ ÏòàÏïΩÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
      const jellaAppointments = await prisma.appointments.findMany({
        where: { doctorId: jellaDoctor.id },
        select: {
          id: true,
          createdAt: true,
          status: true
        },
        orderBy: { createdAt: 'desc' }
      })

      console.log(`Ï†§ÎùºÏùòÏõê ÏùòÏÇ¨Î°ú ÎßåÎì§Ïñ¥ÏßÑ ÏòàÏïΩ Ïàò: ${jellaAppointments.length}`)
      if (jellaAppointments.length > 0) {
        console.log('ÏµúÍ∑º ÏòàÏïΩÎì§:')
        jellaAppointments.slice(0, 3).forEach((apt, index) => {
          console.log(`  ${index + 1}. ${apt.id} (${apt.status}) - ${apt.createdAt}`)
        })
      }
    }

    // 7. ÌÅ¥Î¶¨ÎãâÎ™Ö Ï§ëÎ≥µ ÌôïÏù∏
    console.log('\nüîÑ ÌÅ¥Î¶¨ÎãâÎ™ÖÎ≥Ñ ÏùòÏÇ¨ Ïàò:')
    const clinicGroups = doctors.reduce((acc: any, doctor) => {
      const clinic = doctor.clinic || 'ÎØ∏ÏßÄÏ†ï'
      if (!acc[clinic]) {
        acc[clinic] = []
      }
      acc[clinic].push(doctor)
      return acc
    }, {})

    Object.entries(clinicGroups).forEach(([clinic, doctors]: [string, any]) => {
      console.log(`${clinic}: ${doctors.length}Î™Ö`)
      doctors.forEach((doc: any) => {
        console.log(`  - ${doc.name} (${doc.id})`)
      })
    })

  } catch (error) {
    console.error('Ïò§Î•ò Î∞úÏÉù:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkDoctorConnection()